using System.Data;
using System.Data.SqlClient;

namespace Yangaroo.Core
{
    public interface IDatabaseHelper
    {
        /// <summary>
        /// begin transaction without providing a name
        /// </summary>
        /// <returns>the SqlTransaction object that established the database connection</returns>
        SqlTransaction BeginTransaction();

        /// <summary>
        /// get the sql connection object
        /// </summary>
        /// <returns>return the sqlconnection object</returns>
        SqlConnection GetConnection();

        void Close();

        void Dispose();

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
        /// using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int result = ExecuteNonQuery("setPersonLanguage", parameterValues);
        ///  int result = ExecuteNonQuery("setPersonLanguage", new SqlParameter("@EventID", p.UserID), new SqlParameter("@Language", p.Language));
        /// </remarks>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        int ExecuteNonQuery(bool createTransaction, string spName, params SqlParameter[] parameterValues);

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
        /// SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        DataSet ExecuteDataset(bool transaction, string spName, params SqlParameter[] parameterValues);
    }
}